import { Link } from 'react-router-dom'
import { Song } from '../types/types'
import { AiFillYoutube, AiFillHourglass, AiOutlineSearch } from 'react-icons/ai'
import { useQuery } from 'urql'
import InfiniteScroll from 'react-infinite-scroll-component'

import { SongsQuery } from '../graphql/queries'
import useInput from '../hooks/useInput'
import { useState } from 'react'
import CrossedIcon from './CrossedIcon'
import useCheckBox from '../hooks/useCheckBox'
import { useEffect } from 'react'
import { useWindowDimensions } from '../hooks/useWindowDimensions'

const SongSelect = () => {
  const [searchString, setSearchString] = useState('')
  const [page, setPage] = useState(1)
  const [songs, setSongs] = useState<Song[]>([])

  const resetSongPage = () => {
    setSongs([])
    setPage(1)
  }

  const handleSetSearh = (string: string) => {
    setSearchString(string)
    resetSongPage()
  }

  const search = useInput({
    placeholder: 'Search by title, artist, genre, language...',
    Icon: AiOutlineSearch,
    handleClick: handleSetSearh,
  })

  const hasRightGap = useCheckBox({
    Icon: AiFillHourglass,
    color: 'var(--warningColor)',
    tooltip: 'Include songs that probably have a wrong start time',
    defaultValue: true,
    onClick: resetSongPage,
  })

  const hasVideo = useCheckBox({
    Icon: AiFillYoutube,
    color: 'var(--dangerColor)',
    tooltip: "Include songs that don't have a video",
    defaultValue: true,
    onClick: () => {
      resetSongPage()
      hasRightGap.setValue(false)
    },
  })

  const [result] = useQuery({
    query: SongsQuery,
    variables: { searchString, hasVideo: hasVideo.value, hasRightGap: hasRightGap.value, page },
  })

  const { height } = useWindowDimensions()

  const { data, error } = result

  useEffect(() => {
    if (!result.fetching && !result.error && result.data) {
      const newSongs = result.data.getSongs.songs as Song[]
      setSongs((oldSongs) => [...oldSongs, ...newSongs])
    }
  }, [result])

  if (error) return <p>Oh no... {error.message}</p>

  const searchOptionsHeight = height * 0.1
  const scrollHeight = height * 0.7

  return (
    <div className="centerX">
      <div className="songSelectContainer">
        <div>
          <div className="searchOptions" style={{ height: searchOptionsHeight }}>
            {search.field}
            {hasVideo.field}
            {hasRightGap.field}
          </div>
          <h3>{data?.getSongs?.totalDocs || '?'} songs matched search</h3>
        </div>
        {songs ? (
          songs.length === 0 ? (
            <div>No song matched search</div>
          ) : (
            <InfiniteScroll
              dataLength={songs.length} //This is important field to render the next data
              next={() => setPage(page + 1)}
              hasMore={data.getSongs.hasNextPage}
              loader={<h4>Loading...</h4>}
              endMessage={<h3>--------------------------------------</h3>}
              height={scrollHeight}
              className="scrollDiv"
            >
              {songs.map(({ title, artist, _id, videoId, gapIsAutoGenerated }) => {
                let colorClass
                let icon = <></>
                if (!videoId) {
                  icon = <CrossedIcon Icon={AiFillYoutube} tooltip="No YouTube video" />
                  colorClass = 'dangerColor'
                } else if (gapIsAutoGenerated) {
                  icon = (
                    <CrossedIcon
                      Icon={AiFillHourglass}
                      tooltip="Video probably not synced with lyrics"
                    />
                  )
                  colorClass = 'warningColor'
                }
                return (
                  <Link to={`song/${_id}`}>
                    <li key={_id} className={`listElement ${colorClass}`}>
                      <div className="col3">
                        {artist}: {title}
                      </div>
                      <div className="col3">{icon}</div>
                    </li>
                  </Link>
                )
              })}
            </InfiniteScroll>
          )
        ) : null}
      </div>
    </div>
  )
}

export default SongSelect
