import { Link } from 'react-router-dom'
import { Song } from '../types/types'
import { AiFillYoutube, AiFillHourglass, AiOutlineSearch } from 'react-icons/ai'
import { useQuery } from 'urql'

import { SongsQuery } from '../graphql/queries'
import useInput from '../hooks/useInput'
import { useState } from 'react'
import CrossedIcon from './CrossedIcon'
import useCheckBox from '../hooks/useCheckBox'

const SongSelect = () => {
  const [searchString, setSearchString] = useState('')

  const search = useInput({
    placeholder: 'Search by title, artist, genre, language...',
    Icon: AiOutlineSearch,
    handleClick: setSearchString,
  })

  const hasVideo = useCheckBox({
    Icon: AiFillYoutube,
    color: 'var(--dangerColor)',
    tooltip: "Include songs that don't have a video",
  })

  const hasRightGap = useCheckBox({
    Icon: AiFillHourglass,
    color: 'var(--warningColor)',
    tooltip: 'Include songs that probably have a wrong start time',
  })

  const [result] = useQuery({
    query: SongsQuery,
    variables: { searchString, hasVideo: hasVideo.value, hasRightGap: hasRightGap.value },
  })

  const { data, fetching, error } = result
  if (error) return <p>Oh no... {error.message}</p>

  const songs = fetching ? null : (data.getSongs as Song[])

  return (
    <div className="centerX">
      <div className="songSelectContainer">
        {search.field}
        {hasVideo.field}
        {hasRightGap.field}
        {songs ? (
          songs.length === 0 ? (
            <div>No song matched search</div>
          ) : (
            <ul>
              {songs.map(({ title, artist, _id, videoId, gapIsAutoGenerated }) => {
                let colorClass
                let icon = <></>
                if (!videoId) {
                  icon = <CrossedIcon Icon={AiFillYoutube} tooltip="No YouTube video" />
                  colorClass = 'dangerColor'
                } else if (gapIsAutoGenerated) {
                  icon = (
                    <CrossedIcon
                      Icon={AiFillHourglass}
                      tooltip="Video probably not synced with lyrics"
                    />
                  )
                  colorClass = 'warningColor'
                }
                return (
                  <Link to={`song/${_id}`}>
                    <li key={_id} className={`listElement ${colorClass}`}>
                      <div className="col3">
                        {artist}: {title}
                      </div>
                      <div className="col3">{icon}</div>
                    </li>
                  </Link>
                )
              })}
            </ul>
          )
        ) : null}
      </div>
    </div>
  )
}

export default SongSelect
