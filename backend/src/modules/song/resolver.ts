import { Resolver, Arg, Query, Mutation, Int } from 'type-graphql'

import { ObjectId } from 'mongodb'
import { getModelForClass } from '@typegoose/typegoose'
import { Song } from '../../entities'
import { NewSongInput } from './input'
import { SongPagination } from '../../entities/songPagination'

const SongModel = getModelForClass(Song)

interface TextSearch {
  $search: string
}
interface Exists {
  $exists: boolean
}
interface Search {
  $text?: TextSearch
  videoId?: Exists
  gapIsAutoGenerated?: boolean
  _id?: { $in: String[] }
}

@Resolver((of) => Song)
export default class SongResolver {
  @Query((returns) => Song)
  async getSong(@Arg('id') id: ObjectId) {
    //@ts-ignore
    const song = await SongModel.findById(id).lean().exec()
    return song
  }

  @Query((returns) => [Song])
  async getFavorites(
    @Arg('ids', (type) => [ObjectId], { nullable: true }) ids: ObjectId[]
  ): Promise<Song[]> {
    const songs = await SongModel.find({ _id: { $in: ids } })
      .select([
        '_id',
        'title',
        'artist',
        'language',
        'year',
        'goldenNotes',
        'createdBy',
        'views',
        'rating',
        'ratingCount',
        'gapIsAutoGenerated',
        'videoId',
        'smallImage',
        'bigImage',
        'genres',
        'styles',
      ])
      .sort([['views', -1]])
    return songs
  }

  @Query((returns) => SongPagination)
  async getSongs(
    @Arg('page', (type) => Int) page: number,
    @Arg('searchString', { nullable: true }) searchString: string,
    @Arg('hasVideo', { nullable: true }) hasVideo: boolean,
    @Arg('hasRightGap', { nullable: true }) hasRightGap: boolean
  ): Promise<SongPagination> {
    let search: Search = {}
    if (searchString) {
      search.$text = { $search: searchString }
    }
    if (hasVideo) {
      search.videoId = { $exists: true }
    }
    if (hasRightGap) {
      search.gapIsAutoGenerated = false
    }

    const paginationOptions = {
      page,
      limit: 15,
      select: [
        '_id',
        'title',
        'artist',
        'language',
        'year',
        'goldenNotes',
        'createdBy',
        'views',
        'rating',
        'ratingCount',
        'gapIsAutoGenerated',
        'videoId',
        'smallImage',
        'bigImage',
        'genres',
        'styles',
      ],
      collation: {
        locale: 'en',
      },
      sort: searchString ? { score: { $meta: 'textScore' } } : [['views', -1]],
    }
    const paginate = await SongModel.paginate(search, paginationOptions)
    const { docs, totalDocs, hasNextPage } = paginate
    return { songs: docs, totalDocs, hasNextPage }
  }

  /*
  @Mutation((returns) => Song)
  async createSong(@Arg('songData') songData: NewSongInput): Promise<Song> {
    const { title, artist, language, } = songData
    const alreadyExists = await SongModel.exists({ title, artist, language })
    if (alreadyExists) {
      throw new Error('Same song already exists')
    }
    return SongModel.create(songData)
  }
  */

  @Mutation((returns) => Boolean)
  async createIndexes(): Promise<boolean> {
    try {
      await SongModel.ensureIndexes()
      return true
    } catch (e) {
      // @ts-ignore
      console.error(e.message)
      return false
    }
  }

  @Mutation((returns) => Song)
  async updateVideoInfo(
    @Arg('id') id: ObjectId,
    @Arg('videoId') videoId: string,
    @Arg('gap') gap: number
  ): Promise<Song> {
    const newSong = await SongModel.findOneAndUpdate(
      { _id: id },
      { videoId, gap, gapIsAutoGenerated: false },
      { new: true }
    )
    if (!newSong) {
      throw new Error("Coudn't find or update song")
    }
    return newSong
  }
}
